// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ResumeCoverLetterCreator.DataAccess;

#nullable disable

namespace ResumeCoverLetterCreator.Migrations
{
    [DbContext(typeof(ResumeCreatorDbContext))]
    [Migration("20230721084151_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ResumeCoverLetterCreator.DataAccess.DocumentTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TagGroupId")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TagGroupId");

                    b.ToTable("DocumentTags");
                });

            modelBuilder.Entity("ResumeCoverLetterCreator.DataAccess.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("ResumeCoverLetterCreator.DataAccess.GroupOptionContentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupOptionsId")
                        .HasColumnType("int");

                    b.Property<int>("TagContentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupOptionsId");

                    b.HasIndex("TagContentId");

                    b.ToTable("GroupOptionContent", (string)null);
                });

            modelBuilder.Entity("ResumeCoverLetterCreator.DataAccess.GroupOptionsItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TagGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagGroupId");

                    b.ToTable("GroupOptions");
                });

            modelBuilder.Entity("ResumeCoverLetterCreator.DataAccess.TagContentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentTagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTagId");

                    b.ToTable("TagContent");
                });

            modelBuilder.Entity("ResumeCoverLetterCreator.DataAccess.TagGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TagGroups");
                });

            modelBuilder.Entity("ResumeCoverLetterCreator.DataAccess.DocumentTag", b =>
                {
                    b.HasOne("ResumeCoverLetterCreator.DataAccess.TagGroup", "TagGroup")
                        .WithMany("DocumentTags")
                        .HasForeignKey("TagGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TagGroup");
                });

            modelBuilder.Entity("ResumeCoverLetterCreator.DataAccess.GroupOptionContentItem", b =>
                {
                    b.HasOne("ResumeCoverLetterCreator.DataAccess.GroupOptionsItem", null)
                        .WithMany()
                        .HasForeignKey("GroupOptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResumeCoverLetterCreator.DataAccess.TagContentItem", null)
                        .WithMany()
                        .HasForeignKey("TagContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ResumeCoverLetterCreator.DataAccess.GroupOptionsItem", b =>
                {
                    b.HasOne("ResumeCoverLetterCreator.DataAccess.TagGroup", "TagGroup")
                        .WithMany("GroupOptions")
                        .HasForeignKey("TagGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TagGroup");
                });

            modelBuilder.Entity("ResumeCoverLetterCreator.DataAccess.TagContentItem", b =>
                {
                    b.HasOne("ResumeCoverLetterCreator.DataAccess.DocumentTag", "DocumentTag")
                        .WithMany("TagContent")
                        .HasForeignKey("DocumentTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentTag");
                });

            modelBuilder.Entity("ResumeCoverLetterCreator.DataAccess.DocumentTag", b =>
                {
                    b.Navigation("TagContent");
                });

            modelBuilder.Entity("ResumeCoverLetterCreator.DataAccess.TagGroup", b =>
                {
                    b.Navigation("DocumentTags");

                    b.Navigation("GroupOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
